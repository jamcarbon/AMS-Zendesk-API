import boto3
import botocore.exceptions
import json
import os
import logging
import requests
import urllib3
import base64

http = urllib3.PoolManager()
client = boto3.client('support')
clientdb = boto3.client('dynamodb')

DDB_TABLE = os.environ.get("DYNAMODB_TABLE")
if DDB_TABLE is None:
    raise ClientError("DYNAMODB_TABLE environment variable is undefined")
dynamodb = boto3.resource("dynamodb")
table = dynamodb.Table(DDB_TABLE)

language = "en"

user = 'david.montenegro@consegna.cloud' + '/token'
pwd = 'tokenfromzendesk'

def create_ticket(event):
    try:
        url = 'https://consegna.zendesk.com/api/v2/tickets.json'
        print(event)
        
        subject = event["cases"][0]["subject"]

        ticket_details = {'displayId': event["cases"][0]['displayId'], 'severityCode': event["cases"][0]['severityCode']}

        body_raw = """Amazon Web Services has opened case {displayId} on your behalf.

        The details of your case are as follows:

        Case ID: {displayId}
        Severity: {severityCode}


        To contact us again about this issue, please reply to this Zendesk ticket.
        Please use the following link to attach any files you think would be useful:

        https://console.aws.amazon.com/support/home#/case/?displayId={displayId}&language=en

        (If you will connect by federation, log in before following the link.)


        Sincerely,
        The Amazon Web Services Team

        *Please note: this e-mail was sent from an API that cannot accept incoming e-mail. You can send a public reply to the Zendesk ticket to send the information back to AMS.

        Amazon Web Services, Inc. is an affiliate of Amazon.com, Inc. Amazon.com is a registered trademark of Amazon.com, Inc. or its affiliates.

        Some of the content and links in this email may have been generated by an Amazon customer. Amazon is not responsible for the contents or links within."""

        body = body_raw.format(**ticket_details)
        service = 'AWS Generic Tasks'
        impact = 'No Impact'
        Resolution_Code = 'Permanently Resolved'
        priority = event["cases"][0]["severityCode"]
        AMS_ticketID = event["cases"][0]["displayId"]

        headers = {'content-type': 'application/json'}
        
        #data = {'ticket': {'subject': subject, 'comment': {'body': body}, 'service': service, 'impact': impact, 'Resolution_Code': Resolution_Code}}
        #data = {'ticket': {'subject': subject, 'priority': priority,'comment': {'body': body}}}
        data = {'ticket': {'subject': subject,"external_id": AMS_ticketID,'comment': {'body': body}}}
        payload = json.dumps(data)
        
        #r = http.request('POST', url, auth=(user, pwd), headers=headers, body=payload)
        response = requests.post(url, data=payload, auth=(user, pwd), headers=headers)
        rjson = response.json()
        
        print(type(rjson))
        print(rjson)
        
        #add Zendesk Ticket number as a body on the second reply of AMS
        #nofcases = event["cases"][0]["recentCommunications"]["communications"]
        #idn = len(nofcases)
        #print("create_ticket event: The ammount of public comments on the AMS ticket is:", idn)
        #if idn <= 1:
            #add_zendesk_ticketn(response)

        #Add AMS id with Zendesk Id to DynamoDB table
        ticket_table = {
            "Id": {"S": event["cases"][0]["caseId"]},
            "zendesk_t_id": {"N": rjson["ticket"]["id"]}
        }
        
        register_ticketid(table,ticket_table)
        
        return response
    
    except botocore.exceptions.ClientError as error:
        raise error
        
def register_ticketid(ticket_table):
    return clientdb.put_item(
        TableName=DDB_TABLE,Item=ticket_table)

def read_ticketid(AMS_ticketid):
    zti = clientdb.get_item(TableName=DDB_TABLE,Key=AMS_ticketid
    )
    return zti["Item"]["zendesk_t_id"]["N"]
        
def add_zendesk_ticketn(event):
    ticket_id = event["ticket"]["id"]
    response = client.add_communication_to_case(
        caseId=ticket_id,
        communicationBody=ticket_id
    )
    return response

def update_ticket(event):
    try:
        print("event")
        #Check how many public replies the ticket has
        #nofcases = event["recentCommunications"]["communications"]
        #idn = len(nofcases)
        #print("update_ticket event: The ammount of public comments on the AMS ticket is:", idn)
        #if idn <= 2:
        #    tid = event["recentCommunications"]["communications"][0]
        #else: 
        #    idn1 = len(nofcases) - 2 
        #    tid = event["recentCommunications"]["communications"][idn1]
        #print(tid)

        #get Zendesk ticket id from DynamoDB
        AMS_ticketid = {"Id": {"S": event["cases"][0]["caseId"]}}
        zendesk_tid = register_ticketid(AMS_ticketid)

        url = 'https://consegna.zendesk.com/api/v2/tickets.json' + zendesk_tid + '.json'
        
        subject = event["subject"]
        body = event["recentCommunications"]["communications"][0]["body"]
        print(body)
        service = 'AWS Generic Tasks'
        impact = 'No Impact'
        Resolution_Code = 'Permanently Resolved'

        headers = {'content-type': 'application/json'}
        #data = {'ticket': {'subject': subject, 'comment': {'body': body}, 'service': service, 'impact': impact, 'Resolution_Code': Resolution_Code}}
        data = {'ticket': {'comment': {'body': body, "public": true}}}
        payload = json.dumps(data)
        response = requests.post(url, data=payload, auth=(user, pwd), headers=headers)
        rjson = response.json()
        
        print(type(rjson))
        print(rjson)
        return response
    
    except botocore.exceptions.ClientError as error:
        raise error

def get_ticket():
    try:
        id = '40879'
        body = 'Thanks for choosing Acme Jet Motors.'
        url = 'https://consegna.zendesk.com/api/v2/tickets/41172'
       
        headers = {'content-type': 'application/json'}
        
        #r = http.request('GET', url, auth=(user, pwd), headers=headers)
        response = requests.get(url, auth=(user, pwd), headers=headers)
        rjson = response.json()
        
        print(type(rjson))
        print(rjson)
        return response
    
    except botocore.exceptions.ClientError as error:
        raise error
        
def get_brands():
    try:
        body = 'Thanks for choosing Acme Jet Motors.'
        url = 'https://consegna.zendesk.com/api/v2/brands'        
        
        headers = {'content-type': 'application/json'}
        
        response = requests.get(url, auth=(user, pwd), headers=headers)
        #data = json.loads(response)
        print(type(response))
        rjson = response.json()
        
        #parsed = json.loads(rjson)
        #print(json.dumps(rjson, indent=4))
        print(type(rjson))
        print(rjson)
        return response
    
    except botocore.exceptions.ClientError as error:
        raise error
        
def get_ticketfields():
    try:
        url = 'https://consegna.zendesk.com/api/v2/ticket_fields'        
        
        headers = {'content-type': 'application/json'}
        
        response = requests.get(url, auth=(user, pwd), headers=headers)
        #data = json.loads(response)
        print(type(response))
        rjson = response.json()
        
        #parsed = json.loads(rjson)
        #print(json.dumps(rjson, indent=4))
        print(type(rjson))
        print(rjson)
        return response
    
    except botocore.exceptions.ClientError as error:
        raise error

def describe_cases_create(event):
    try:
        ams_case_id = event["detail"]["responseElements"]["caseId"]
        response1 = client.describe_cases(
            caseIdList=[
                ams_case_id,
            ],
            includeResolvedCases=True,
            language=language,
            includeCommunications=True
        )
    
        return(response1)

    except botocore.exceptions.ClientError as error:
        raise error

def describe_cases_update(event):
    try:
        ams_case_id = event["detail"]["requestParameters"]["caseId"]
        response1 = client.describe_cases(
            caseIdList=[
                ams_case_id,
            ],
            includeResolvedCases=False,
            language=language,
            includeCommunications=True
        )
    
        return(response1)

    except botocore.exceptions.ClientError as error:
        raise error

def lambda_handler(event, context):
    try:
        print(event)

        #ticket_info = get_ticket(event)

        #main
        eventDetailType = event["detail-type"]
        eventName = event["detail"]["eventName"]
        

        if eventDetailType == "AWS API Call via CloudTrail":
            if eventName == "CreateCase":
                ticket_data = describe_cases_create(event)
                ticket_info = create_ticket(ticket_data)
                ticket_json = ticket_info.json()
            elif eventName == "AddCommunicationToCase":
                ticket_data = describe_cases_update(event)
                ticket_info = update_ticket(ticket_data)
                ticket_json = ticket_info.json()

        else:
            return "There was no event from CLoudTrail"
       
        reply = "Zendesk ticket created"
        
        #ticket_json = get_ticket()
        
        
        print(ticket_json)
        print(type(ticket_json))

        return ticket_json

    except botocore.exceptions.ClientError as error:
        raise error