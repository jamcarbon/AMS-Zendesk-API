Resources:
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: Step1_ZendeskIntegration
      Handler: index.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaFunctionRole.Arn
      MemorySize: 512
      Timeout: 10
      Code:
        ZipFile: |
            import boto3
            import botocore.exceptions
            import json
            import os

            client = boto3.client('support')

            language = "en"

            def add_communication_to_case(ams_caseID, ticket_data):
                try:
                    AMSticketbody = ticket_data["latest_public_comment"]
                    response = client.add_communication_to_case(
                        caseId=ams_caseID,
                        communicationBody=AMSticketbody 
                    )
                    print(response)
                    print("Successfully updated AMS ticket #:", ams_caseID)
                    return ams_caseID
                    
                except botocore.exceptions.ClientError as error:
                    raise error

            def lambda_handler(event, context):
                try:        
                    ticket_body = event['body']
                    ticket_json = json.loads(ticket_body)

                    #ticket_json = event["body"]

                    ticket_data = {
                        "ticket_status": ticket_json['ticket']["ticket_status"],
                        "ticket_type": ticket_json['ticket']["ticket_type"],
                        "ticket_priority": ticket_json['ticket']["ticket_priority"],
                        "ticket_requester_name": ticket_json['ticket']["ticket_requester_name"],
                        "ticket_external_id": ticket_json['ticket']["ticket_external_id"],
                        "ticket_service": ticket_json['ticket']["ticket_service"],
                        "ticket_impact": ticket_json['ticket']["ticket_impact"],
                        "created_at": ticket_json['ticket']["created_at"],
                        "description": ticket_json['ticket']["description"],
                        "ticket_id": ticket_json['ticket']["id"],
                        "ticket_subject": ticket_json['ticket']["ticket_subject"],
                        "updated_at": ticket_json['ticket']["updated_at"],
                        "ticket_url": ticket_json['ticket']["ticket_url"],
                        "public_comment": ticket_json['ticket']["public_comment"],
                        "latest_public_comment": ticket_json['ticket']["latest_public_comment"],
                        "ticket_tags": ticket_json['ticket']["ticket_tags"]
                    }
                    
                    reply = "The ticket", ticket_data["ticket_id"], "has been updated sucesfully."
                    reply1 = "The ticket has been updated sucesfully."
                    
                    print("ticket_data", ticket_data)

                    ams_caseID = ticket_data["ticket_external_id"]

                    add_communication_to_case(ams_caseID, ticket_data)
                    
                    reply2 = "The AMS ticket #", ams_caseID,  "has been updated sucesfully."

                    return {
                        'statusCode': 200,
                        'body': reply2
                    }
                
                except botocore.exceptions.ClientError as error:
                    raise error

  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: AppendToLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - support:*
            Resource: "*"

  ZendeskWebhookAPI:
    Type: 'AWS::ApiGatewayV2::Api'
    DependsOn: LambdaFunction
    Properties:
        Name: Zendesk-Webhook-API
        Description: Zendesk-Webhook-API
        Target: !GetAtt [ LambdaFunction, Arn ]
        ProtocolType: "HTTP"

  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt [ LambdaFunction, Arn ]
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ZendeskWebhookAPI}/*